name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff mypy

      - name: Run Black (code formatting check)
        run: black --check src/ tests/

      - name: Run Ruff (linting)
        run: ruff check src/ tests/

      - name: Run MyPy (type checking)
        run: mypy src/ --ignore-missing-imports
        continue-on-error: true  # Don't fail build on type errors for now

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test environment
        run: |
          echo "OPENAI_API_KEY=test_key_placeholder" > .env

      - name: Test dry run execution
        run: |
          python src/main.py --brief briefs/SpringRefreshCampaign.json --dry-run

      - name: Test agent initialization
        run: |
          python src/creative_automation_agent.py --once || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install bandit
        run: pip install bandit[toml]

      - name: Run Bandit security scan
        run: bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, integration-test]
    if: always()

    steps:
      - name: Check build status
        run: |
          echo "Build completed!"
          echo "Lint and format: ${{ needs.lint-and-format.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Integration: ${{ needs.integration-test.result }}"
